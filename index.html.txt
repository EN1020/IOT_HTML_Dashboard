<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>IoT HTML Dashboard</title>

  <!-- Bootstrap 5 & Icons -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css" rel="stylesheet">

  <!-- jQuery & Chart.js -->
  <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.1/dist/chart.umd.min.js"></script>

  <style>
    :root{
      --glass-bg: rgba(255,255,255,.6);
      --glass-border: rgba(255,255,255,.35);
      --text-main: #1f2937;
      --text-dim: #6b7280;
      --card-shadow: 0 10px 25px rgba(0,0,0,.08);
      --gradient: radial-gradient(1200px 600px at 10% -10%, #a5b4fc22, transparent 60%),
                  radial-gradient(900px 500px at 110% 10%, #fdba7422, transparent 60%),
                  radial-gradient(800px 400px at 50% 120%, #34d39922, transparent 60%);
    }
    [data-theme="dark"]{
      --glass-bg: rgba(17,24,39,.65);
      --glass-border: rgba(255,255,255,.08);
      --text-main: #e5e7eb;
      --text-dim: #9ca3af;
      --card-shadow: 0 12px 28px rgba(0,0,0,.35);
      --gradient: radial-gradient(1200px 600px at 10% -10%, #6366f122, transparent 60%),
                  radial-gradient(900px 500px at 110% 10%, #f59e0b22, transparent 60%),
                  radial-gradient(800px 400px at 50% 120%, #10b98122, transparent 60%);
      background: #0b1220;
    }

    body{
      min-height: 100vh;
      background:
        linear-gradient(180deg, #f8fafc 0%, #f1f5f9 100%);
      background-attachment: fixed;
      color: var(--text-main);
    }
    body::before{
      content:"";
      position: fixed;
      inset: 0;
      background: var(--gradient);
      pointer-events: none;
      z-index: -1;
    }

    .glass{
      background: var(--glass-bg);
      backdrop-filter: saturate(140%) blur(8px);
      border: 1px solid var(--glass-border);
      border-radius: 18px;
      box-shadow: var(--card-shadow);
    }

    .brand{
      font-weight: 800;
      letter-spacing:.3px;
    }

    .kpi{
      display: grid;
      grid-template-columns: 1fr auto;
      gap: .5rem;
      align-items: center;
    }
    .kpi .value{ font-size: 1.6rem; font-weight: 800; }
    .kpi .label{ color: var(--text-dim); font-size: .9rem; }
    .trend{ font-size:.9rem; }

    .table > :not(caption) > * > *{
      background: transparent !important;
    }
    .status-dot{
      width:10px;height:10px;border-radius:50%;
      display:inline-block;margin-right:.5rem;
    }

    .footer{
      color: var(--text-dim);
      font-size:.9rem;
    }

    /* Motion safety */
    @media (prefers-reduced-motion:no-preference){
      .fade-up{
        animation: fadeUp .6s ease-out both;
      }
      @keyframes fadeUp{
        from{opacity:0; transform: translateY(12px);}
        to{opacity:1; transform: translateY(0);}
      }
    }
  </style>
</head>
<body data-theme="light">
  <!-- Top Bar -->
  <nav class="navbar navbar-expand-lg bg-transparent px-3 px-md-4 pt-3">
    <div class="container-fluid glass py-2 px-3 px-md-4">
      <a class="navbar-brand brand d-flex align-items-center gap-2" href="#">
        <i class="fa-solid fa-gauge-high"></i> IoT HTML Dashboard
      </a>
      <div class="d-flex align-items-center gap-2 ms-auto">
        <span class="text-secondary d-none d-md-inline">Live</span>
        <span class="badge text-bg-success">●</span>
        <button id="themeToggle" class="btn btn-sm btn-outline-secondary ms-2">
          <i class="fa-solid fa-moon"></i> <span class="d-none d-sm-inline">Dark</span>
        </button>
      </div>
    </div>
  </nav>

  <!-- Main Content -->
  <main class="container my-4 my-md-5">
    <!-- KPIs -->
    <section class="row g-3 g-md-4">
      <div class="col-12 col-md-3">
        <div class="glass p-3 p-md-4 kpi fade-up">
          <div>
            <div class="label">Temperature</div>
            <div class="value" id="kpiTemp">-- °C</div>
          </div>
          <i class="fa-solid fa-temperature-half fs-3"></i>
          <div class="trend text-success" id="kpiTempTrend">+0.0</div>
        </div>
      </div>
      <div class="col-12 col-md-3">
        <div class="glass p-3 p-md-4 kpi fade-up" style="animation-delay:.05s">
          <div>
            <div class="label">Humidity</div>
            <div class="value" id="kpiHum">-- %</div>
          </div>
          <i class="fa-solid fa-droplet fs-3"></i>
          <div class="trend text-primary" id="kpiHumTrend">+0.0</div>
        </div>
      </div>
      <div class="col-12 col-md-3">
        <div class="glass p-3 p-md-4 kpi fade-up" style="animation-delay:.1s">
          <div>
            <div class="label">Air Quality (PM2.5)</div>
            <div class="value" id="kpiAQ">-- μg/m³</div>
          </div>
          <i class="fa-solid fa-wind fs-3"></i>
          <div class="trend text-danger" id="kpiAQTrend">-0.0</div>
        </div>
      </div>
      <div class="col-12 col-md-3">
        <div class="glass p-3 p-md-4 kpi fade-up" style="animation-delay:.15s">
          <div>
            <div class="label">Devices Online</div>
            <div class="value" id="kpiOnline">--</div>
          </div>
          <i class="fa-solid fa-plug-circle-bolt fs-3"></i>
          <div class="trend text-success" id="kpiOnlineTrend">+0</div>
        </div>
      </div>
    </section>

    <!-- Charts row -->
    <section class="row g-3 g-md-4 mt-1">
      <div class="col-12 col-xl-8">
        <div class="glass p-3 p-md-4 fade-up">
          <div class="d-flex align-items-center justify-content-between mb-3">
            <h5 class="mb-0">Temperature & Humidity (last 60s)</h5>
            <div class="btn-group btn-group-sm">
              <button class="btn btn-outline-secondary" id="btnPause">Pause</button>
              <button class="btn btn-outline-secondary" id="btnResume">Resume</button>
            </div>
          </div>
          <canvas id="lineChart" height="110"></canvas>
        </div>
      </div>
      <div class="col-12 col-xl-4">
        <div class="glass p-3 p-md-4 fade-up">
          <h5 class="mb-3">Air Quality Breakdown</h5>
          <canvas id="donutChart" height="220"></canvas>
          <div class="mt-3 small text-secondary">
            <span class="me-3"><span class="status-dot" style="background:#"></span>PM2.5</span>
            <span class="me-3"><span class="status-dot" style="background:#"></span>PM10</span>
            <span><span class="status-dot" style="background:#"></span>VOC</span>
          </div>
        </div>
      </div>
    </section>

    <!-- Bar + table -->
    <section class="row g-3 g-md-4 mt-1">
      <div class="col-12 col-lg-7">
        <div class="glass p-3 p-md-4 fade-up">
          <h5 class="mb-3">Device Signal Strength</h5>
          <canvas id="barChart" height="120"></canvas>
        </div>
      </div>
      <div class="col-12 col-lg-5">
        <div class="glass p-3 p-md-4 fade-up">
          <div class="d-flex align-items-center justify-content-between mb-2">
            <h5 class="mb-0">Devices</h5>
            <div class="input-group input-group-sm" style="max-width: 220px;">
              <span class="input-group-text"><i class="fa-solid fa-magnifying-glass"></i></span>
              <input id="searchBox" type="text" class="form-control" placeholder="Search device..." />
            </div>
          </div>
          <div class="table-responsive">
            <table class="table align-middle">
              <thead>
                <tr>
                  <th>Name</th>
                  <th>Status</th>
                  <th>Last Seen</th>
                  <th>Signal</th>
                </tr>
              </thead>
              <tbody id="deviceTbody">
                <!-- Filled by JS -->
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </section>

    <p class="text-center mt-4 footer">
      Built with HTML • Bootstrap 5 • jQuery • Chart.js
    </p>
  </main>

  <script>
    // --------------------------
    // Theme toggle (Light/Dark)
    // --------------------------
    const themeBtn = document.getElementById('themeToggle');
    themeBtn.addEventListener('click', () => {
      const root = document.body;
      const current = root.getAttribute('data-theme');
      root.setAttribute('data-theme', current === 'dark' ? 'light' : 'dark');
      themeBtn.innerHTML =
        (current === 'dark')
        ? '<i class="fa-solid fa-moon"></i> <span class="d-none d-sm-inline">Dark</span>'
        : '<i class="fa-solid fa-sun"></i> <span class="d-none d-sm-inline">Light</span>';
    });

    // --------------------------
    // Charts setup
    // --------------------------
    const timeLabels = Array.from({length: 60}, (_, i) => `${60 - i}s`);
    const ctxLine = document.getElementById('lineChart');
    const lineChart = new Chart(ctxLine, {
      type: 'line',
      data: {
        labels: timeLabels,
        datasets: [
          { label: 'Temperature (°C)', data: Array(60).fill(null), tension: .35, pointRadius: 0, borderWidth: 2 },
          { label: 'Humidity (%)',     data: Array(60).fill(null), tension: .35, pointRadius: 0, borderWidth: 2 }
        ]
      },
      options: {
        animation: false,
        maintainAspectRatio: false,
        scales: {
          x: { grid: { display: false } },
          y: { beginAtZero: true, ticks: { stepSize: 5 } }
        },
        plugins: { legend: { display: true } }
      }
    });

    const ctxDonut = document.getElementById('donutChart');
    const donutChart = new Chart(ctxDonut, {
      type: 'doughnut',
      data: {
        labels: ['PM2.5', 'PM10', 'VOC'],
        datasets: [{ data: [40, 35, 25] }]
      },
      options: {
        animation: false,
        plugins: { legend: { position: 'bottom' } },
        cutout: '62%'
      }
    });

    const deviceNames = ['RPI-01','ESP32-02','RPI-03','ESP32-04','CAM-05','RPI-06'];
    const ctxBar = document.getElementById('barChart');
    const barChart = new Chart(ctxBar, {
      type: 'bar',
      data: {
        labels: deviceNames,
        datasets: [{ label: 'Signal (dBm)', data: deviceNames.map(() => -30 - Math.floor(Math.random()*40)) }]
      },
      options: {
        animation: false,
        scales: { y: { suggestedMin: -90, suggestedMax: -20 } },
        plugins: { legend: { display: false } }
      }
    });

    // --------------------------
    // Devices table (mock)
    // --------------------------
    const tbody = document.getElementById('deviceTbody');
    const devices = deviceNames.map((n,i)=>({
      name: n,
      online: Math.random() > .2,
      lastSeen: new Date(Date.now() - Math.random()*5*60*1000),
      signal: barChart.data.datasets[0].data[i]
    }));
    function renderTable(list){
      tbody.innerHTML = list.map(d=>{
        const dotColor = d.online ? '#22c55e' : '#ef4444';
        const fmt = d.lastSeen.toLocaleTimeString();
        return `<tr>
          <td>${d.name}</td>
          <td><span class="status-dot" style="background:${dotColor}"></span>${d.online?'Online':'Offline'}</td>
          <td>${fmt}</td>
          <td>${d.signal} dBm</td>
        </tr>`;
      }).join('');
    }
    renderTable(devices);

    // simple search
    $('#searchBox').on('input', function(){
      const q = $(this).val().toLowerCase();
      const filtered = devices.filter(d => d.name.toLowerCase().includes(q));
      renderTable(filtered);
    });

    // --------------------------
    // Live data simulation
    // (Replace with your API/WebSocket)
    // --------------------------
    let paused = false;
    $('#btnPause').on('click', ()=> paused = true);
    $('#btnResume').on('click', ()=> paused = false);

    let lastTemp = 25, lastHum = 55, lastAQ = 22, lastOnline = devices.filter(d=>d.online).length;

    function pushData(temp, hum){
      const dsT = lineChart.data.datasets[0].data;
      const dsH = lineChart.data.datasets[1].data;
      dsT.push(temp); dsH.push(hum);
      if(dsT.length>60) dsT.shift();
      if(dsH.length>60) dsH.shift();
      lineChart.update('none');
    }

    function tick(){
      if(paused) return;

      // Mock signals
      lastTemp = +(lastTemp + (Math.random()-.5)*0.6).toFixed(1);
      lastHum  = +(lastHum  + (Math.random()-.5)*1.2).toFixed(1);
      lastAQ   = +(lastAQ   + (Math.random()-.5)*1.0).toFixed(1);

      // donut mix (must be >=0)
      let pm25 = Math.max(5, lastAQ + 10 + (Math.random()*6-3));
      let pm10 = Math.max(5, lastAQ + 5  + (Math.random()*6-3));
      let voc  = Math.max(5, 20 + (Math.random()*10-5));
      donutChart.data.datasets[0].data = [pm25, pm10, voc];
      donutChart.update('none');

      // online devices fluctuate
      const drift = Math.random() < .3 ? (Math.random()<.5?-1:1) : 0;
      lastOnline = Math.min(devices.length, Math.max(0, lastOnline + drift));

      // update KPIs
      $('#kpiTemp').text(`${lastTemp} °C`);
      $('#kpiHum').text(`${lastHum} %`);
      $('#kpiAQ').text(`${(pm25).toFixed(1)} μg/m³`);
      $('#kpiOnline').text(lastOnline);

      // pseudo trends
      $('#kpiTempTrend').text(((Math.random()-.5)*0.4>0?'+':'') + ((Math.random()-.5)*0.4).toFixed(1));
      $('#kpiHumTrend').text(((Math.random()-.5)*0.8>0?'+':'') + ((Math.random()-.5)*0.8).toFixed(1));
      $('#kpiAQTrend').text(((Math.random()-.5)*0.8>0?'+':'') + ((Math.random()-.5)*0.8).toFixed(1));
      $('#kpiOnlineTrend').text(((drift>=0?'+':'') + drift));

      // line chart feed
      pushData(lastTemp, lastHum);

      // update table times every 5s
      if(Math.floor(Date.now()/1000)%5===0){
        devices.forEach(d=>{
          if(Math.random()<.2) d.online = !d.online;
          d.lastSeen = new Date();
        });
        renderTable(devices);
      }
    }
    // seed initial line
    for(let i=0;i<20;i++){ pushData(lastTemp, lastHum); }

    setInterval(tick, 1000);

    // --------------------------
    // TODO: Replace with real data
    // --------------------------
    // 1) WebSocket example:
    // const ws = new WebSocket('ws://<your-host>:<port>/ws');
    // ws.onmessage = (ev) => {
    //   const { temp, hum, pm25, pm10, voc, devicesOnline } = JSON.parse(ev.data);
    //   if(paused) return;
    //   lastTemp = temp; lastHum = hum;
    //   donutChart.data.datasets[0].data = [pm25, pm10, voc];
    //   lastOnline = devicesOnline;
    //   pushData(temp, hum);
    //   lineChart.update('none'); donutChart.update('none');
    //   $('#kpiTemp').text(`${temp} °C`);
    //   $('#kpiHum').text(`${hum} %`);
    //   $('#kpiAQ').text(`${pm25.toFixed(1)} μg/m³`);
    //   $('#kpiOnline').text(devicesOnline);
    // };

    // 2) REST API polling example:
    // async function poll(){
    //   try{
    //     const r = await fetch('/api/metrics'); // returns { temp, hum, pm25, pm10, voc, devicesOnline }
    //     const x = await r.json();
    //     // update charts & KPIs similar to above...
    //   }catch(e){ console.error(e); }
    //   setTimeout(poll, 1000);
    // }
    // poll();
  </script>

  <!-- Bootstrap JS -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
